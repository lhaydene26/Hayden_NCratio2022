function funct_plot_correlRadius_error(data_NCratio_EDprob, pos, gs)
    % This function accepts a test data set generated by funct_NCratio_EDprob.m and plots the 
    % probability of correct prediction as a function of community radius


    lowest_pred_error = NaN(size(data_NCratio_EDprob,1),1);
    for i = 1:size(data_NCratio_EDprob,1)
        n_correct = 0;
        n_total = 0;
        for j = 1:size(data_NCratio_EDprob,2)
            if (data_NCratio_EDprob(i,j,2) == (data_NCratio_EDprob(i,j,1)<pos(i)))
                n_correct = n_correct + 1;
            end
            n_total = n_total + 1;
        end
        lowest_pred_error(i) = n_correct/n_total;
    end


    cmap = lines(1);
    cmap2 = [159, 204, 235]/256;
    fig = figure;
    hold on;
    x = gs';
    y = lowest_pred_error;
    dy = sqrt(y.*(1-y)./n_total);
    fill([x;flipud(x)],[y-dy;flipud(y+dy)],cmap2,'linestyle','none');
    plot(x,y,'color',cmap,'LineWidth',2);
    axis([0, 250, 0.55, 0.72]);
    xlabel('Community radius (um)')
    ylabel('Proportion of correct predictions')
    standardizePlot(gcf,gca,strcat('figures/model_1/correlLength_vs_Predictions'));
    close(fig);

    
    
    
    x = find(gs==70);
    start_indices = 1;
    k = 2;
    i = 2;
  	while (i < size(data_NCratio_EDprob,2)-1)
        if (data_NCratio_EDprob(x,i+1,3) < data_NCratio_EDprob(x,i,3))
            start_indices(k) = i;
            k = k + 1;
        end
        i = i + 1;
    end
    
    bins = linspace(0,1.02,31);
    data_binned = cell(numel(bins),1);
    for i = 1:numel(start_indices)
        if (i < numel(start_indices))
            data_range = start_indices(i):(start_indices(i+1)-1);
        else
            data_range = start_indices(i):size(data_NCratio_EDprob,2);
        end
        x_left = min(data_NCratio_EDprob(x,data_range,3));
        x_right = max(data_NCratio_EDprob(x,data_range,3));
        for j = data_range
            y = discretize((data_NCratio_EDprob(x,j,3)-x_left)/(x_right-x_left), bins);
            data_binned{y}(end+1) = data_NCratio_EDprob(x,j,2) ~= (data_NCratio_EDprob(x,j,1)<pos(x));
        end
    end
    
    data_averaged = NaN(numel(bins),1);
    for i = 1:numel(bins)
        data_averaged(i) = mean(data_binned{i});
    end
    
    fig = figure;
    plot(bins, data_averaged, 'LineWidth',2);
    xlim([bins(1), bins(end)]);
    ylim([0, 0.7])
    xlim([0, 1])
    box off
    xlabel('AP axis');
    ylabel('Error probability')
    standardizePlot(gcf,gca,strcat('figures/model_1/errors_APaxis'));
    close(fig)








end