function [y, best_fit_mb, residual_errors] = funct_plot_correlRadius_error(data_NCratio_EDprob, gs, dataSet)
    % This function accepts a test data set generated by funct_NCratio_EDprob.m and plots the 
    % probability of correct prediction as a function of community radius. In this model,
    % the N/C ratio threshold predicted to arrest division is graded across the AP axis up to 10%

    
    tic
    data_set = 34:39;
    x = gs';
    y = NaN(numel(gs),1);
    best_fit_mb = cell(numel(gs),1);
    for i = 1:numel(gs)
        % go through each embryo
        n_correct = 0;
        n_total = 0;
        best_fit_mb{i} = NaN(numel(data_set),3);
        for j = 1:numel(data_set)
            % determine what x position is the far left, right, and middle of the AP axis
            x_left = min(data_NCratio_EDprob{data_set(j),i}(:,1));
            x_right = max(data_NCratio_EDprob{data_set(j),i}(:,1));
            x_mid = mean([x_left,x_right]);

            % determine the slope and intercept of the specified gradient passing through these points
            slope_vals = -0.1:0.001:0.1;
            int_vals = nanmean(data_NCratio_EDprob{data_set(j),i}(:,3))*(0.5:0.01:1.5);
            best_pred = -Inf;
            for k = 1:numel(slope_vals)
                for m = 1:numel(int_vals)
                    nc = 0;
                    nt = 0;
                    
                    gradient_slope = (int_vals(m)*slope_vals(k)/2)/(x_right-x_mid);
                    gradient_intercept = int_vals(m)-gradient_slope*x_mid;

                    % for every point, determine if the prediction is correct
                    for n = 1:size(data_NCratio_EDprob{data_set(j),i},1)
                        if (~isnan(data_NCratio_EDprob{data_set(j),i}(n,1)))
                            if (data_NCratio_EDprob{data_set(j),i}(n,4) == (data_NCratio_EDprob{data_set(j),i}(n,3) < gradient_slope*data_NCratio_EDprob{data_set(j),i}(n,1)+gradient_intercept))
                                nc = nc + 1;
                            end
                            nt = nt + 1;
                        end
                    end
                    if (nc/nt > best_pred)
                        best_pred = nc/nt;
                        best_fit_mb{i}(j,1) = nc/nt;
                        best_fit_mb{i}(j,2) = slope_vals(k);
                        best_fit_mb{i}(j,3) = int_vals(m)/nanmean(data_NCratio_EDprob{data_set(j),i}(:,3));
                    end
                end
            end
            n_correct = n_correct + best_pred*nt;
            n_total = n_total + nt;
        end
        y(i) = n_correct/n_total;
        i
        toc
    end
    
    residual_errors = cell(numel(gs),2);
    for i = 1:numel(gs)
        index_res_c = 1;
        index_res_i = 1;
        for j = 1:numel(data_set)
            x_left = min(data_NCratio_EDprob{data_set(j),i}(:,1));
            x_right = max(data_NCratio_EDprob{data_set(j),i}(:,1));
            x_mid = mean([x_left,x_right]);

            gradient_slope = (best_fit_mb{i}(j,3)*nanmean(data_NCratio_EDprob{data_set(j),i}(:,3))*best_fit_mb{i}(j,2)/2)/(x_right-x_mid);
            gradient_intercept = best_fit_mb{i}(j,3)*nanmean(data_NCratio_EDprob{data_set(j),i}(:,3))-gradient_slope*x_mid;
                
            for n = 1:size(data_NCratio_EDprob{data_set(j),i},1)
                if (~isnan(data_NCratio_EDprob{data_set(j),i}(n,1)))
                    if (data_NCratio_EDprob{data_set(j),i}(n,4) == (data_NCratio_EDprob{data_set(j),i}(n,3) < gradient_slope*data_NCratio_EDprob{data_set(j),i}(n,1)+gradient_intercept))
                        residual_errors{i,1}(index_res_c,1) = data_NCratio_EDprob{data_set(j),i}(n,1);
                        residual_errors{i,1}(index_res_c,2) = data_NCratio_EDprob{data_set(j),i}(n,2);
                        residual_errors{i,1}(index_res_c,3) = data_NCratio_EDprob{data_set(j),i}(n,4);
                        residual_errors{i,1}(index_res_c,4) = j;
                        index_res_c = index_res_c + 1;
                    else
                        residual_errors{i,2}(index_res_i,1) = data_NCratio_EDprob{data_set(j),i}(n,1);
                        residual_errors{i,2}(index_res_i,2) = data_NCratio_EDprob{data_set(j),i}(n,2);
                        residual_errors{i,2}(index_res_i,3) = data_NCratio_EDprob{data_set(j),i}(n,4);
                        residual_errors{i,2}(index_res_i,4) = j;
                        index_res_i = index_res_i + 1;
                    end
                    nt = nt + 1;
                end
            end
        end
        i
    end
    
    
    
    cmap = lines(1);
    cmap2 = [159, 204, 235]/256;
    fig = figure;
    hold on;
    x = gs';
    dy = sqrt(y.*(1-y)./n_total);
    fill([x;flipud(x)],[y-dy;flipud(y+dy)],cmap2,'linestyle','none');
    plot(x,y,'color',cmap,'LineWidth',2);
    axis([0, 250, 0.8, 0.95]);
    xlabel('Community radius (um)')
    ylabel('Proportion of correct predictions')
    standardizePlot(gcf,gca,strcat('figures/model_4/correlLength_vs_Predictions_',dataSet));
    close(fig);
    
    
    if (and(~strcmp(dataSet,'full'),~strcmp(dataSet,'full_trimmed')))
        res_true = residual_errors{14,1};
        res_false = residual_errors{14,2};
        msize = 200;
        for i = 1:numel(data_set)
            fig = figure;
            hold on
            axis equal
            axis([0, 800, 0, 300])
    %         axis off
            scatter(res_true(res_true(:,4) == i,1), res_true(res_true(:,4) == i,2), msize, '.', 'MarkerFaceColor', [0, 137, 15]/256, 'MarkerEdgeColor', [0, 137, 15]/256)
            scatter(res_false(and(res_false(:,4) == i,res_false(:,3) == 0),1), res_false(and(res_false(:,4) == i,res_false(:,3) == 0),2), msize, '.', 'MarkerFaceColor', [166, 7, 0]/256, 'MarkerEdgeColor', [166, 7, 0]/256); % red
            scatter(res_false(and(res_false(:,4) == i,res_false(:,3) == 1),1), res_false(and(res_false(:,4) == i,res_false(:,3) == 1),2), msize, '.', 'MarkerFaceColor', [0, 41, 219]/256, 'MarkerEdgeColor', [0, 41, 219]/256) % blue
            standardizePlot(gcf,gca,strcat('figures/model_4/division_predictions_',dataSet(1:end-3),'/gridpts_correctness_embryo_',num2str(i)));
            close(fig);
        end
    end


end